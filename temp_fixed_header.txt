// The return statement for the isFullScreen condition
if (isFullScreen) {
  return (
    <div className="w-full h-full flex flex-col px-6 py-4">
      <Tabs value={activeTab} onValueChange={setActiveTab} className="flex-grow flex flex-col overflow-hidden">
        <TabsList className="grid grid-cols-2 mb-4">
          <TabsTrigger value="details">Session Details & Observations</TabsTrigger>
          <TabsTrigger value="performance">Performance Assessment</TabsTrigger>
        </TabsList>

        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4 overflow-hidden flex flex-col flex-grow">
            <div className="flex-grow overflow-auto pr-2">
              {/* Session Details Tab */}
              <TabsContent value="details" className="space-y-6 mt-0 px-4">
                {/* Use SessionDetailsLayout for consistent layout */}
                <SessionDetailsLayout
                  className="mt-6"
                  headerSection={
                    <div className="w-full rounded-lg p-4 bg-muted/20">
                      <h2 className="text-xl font-semibold mb-2">Session Details</h2>
                      {/* Session header fields here */}
                    </div>
                  }
                  presentSection={
                    <div>
                      <h3 className="section-header">
                        <UserCheck className="h-5 w-5" />
                        Present
                      </h3>
                      {/* Present section content here */}
                    </div>
                  }
                  productsSection={
                    <div>
                      <h3 className="section-header">
                        <Package className="h-5 w-5" />
                        Products & Resources
                      </h3>
                      {/* Products section content here */}
                    </div>
                  }
                  observationsSection={
                    <div>
                      <h3 className="section-header">
                        <ClipboardList className="h-5 w-5" />
                        Observations
                      </h3>
                      {/* Observations section content here */}
                    </div>
                  }
                />
              </TabsContent>

              {/* Performance Assessment Tab */}
              <TabsContent value="performance" className="space-y-6 mt-0 px-4">
                {/* Performance assessment content */}
              </TabsContent>
            </div>

            {/* Footer with navigation and submit buttons */}
            <div className="pt-2 border-t flex justify-between items-center">
              <div className="flex items-center">
                {activeTab !== "details" && (
                  <Button
                    type="button"
                    variant="outline"
                    onClick={handleBack}
                    className="mr-2"
                  >
                    <ChevronLeft className="h-4 w-4 mr-1" />
                    Back
                  </Button>
                )}
                {activeTab !== "performance" && (
                  <Button
                    type="button"
                    onClick={handleNext}
                    variant="ghost"
                  >
                    Next
                    <ChevronRight className="h-4 w-4 ml-1" />
                  </Button>
                )}
              </div>

              <div className="flex items-center space-x-2">
                <Button
                  type="button"
                  variant="outline"
                  onClick={() => onOpenChange(false)}
                >
                  Cancel
                </Button>
                {activeTab === "performance" && (
                  <Button 
                    type="submit"
                    disabled={createSessionMutation.isPending}
                  >
                    {createSessionMutation.isPending ? "Creating..." : "Create Session"}
                  </Button>
                )}
              </div>
            </div>
          </form>
        </Form>
      </Tabs>

      {/* Strategy selection dialog */}
      <StrategySelectionDialog
        open={strategySelectionOpen}
        onOpenChange={setStrategySelectionOpen}
        selectedStrategies={
          currentGoalIndex !== null && currentMilestoneIndex !== null
            ? form.getValues(`performanceAssessments.${currentGoalIndex}.milestones.${currentMilestoneIndex}.strategies`) || []
            : []
        }
        milestoneId={
          currentGoalIndex !== null && currentMilestoneIndex !== null
            ? form.getValues(`performanceAssessments.${currentGoalIndex}.milestones.${currentMilestoneIndex}.milestoneId`) || 0
            : 0
        }
        onSelectStrategy={handleStrategySelection}
        maxStrategies={5}
      />
    </div>
  );
}