import { useState, useEffect } from "react";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import { format } from "date-fns";
import { useMutation, useQuery } from "@tanstack/react-query";
import { 
  CalendarIcon, 
  ChevronLeft, 
  ChevronRight, 
  ClipboardList, 
  Package, 
  Plus,
  User,
  UserCheck,
  X
} from "lucide-react";

import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Tabs, TabsList, TabsTrigger, TabsContent } from "@/components/ui/tabs";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Textarea } from "@/components/ui/textarea";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { Calendar } from "@/components/ui/calendar";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { SessionDetailsLayout } from "./SessionDetailsLayout";
import { StrategySelectionDialog } from "./StrategySelectionDialog";

import { queryClient, apiRequest } from "@/lib/queryClient";
import { cn } from "@/lib/utils";
import type { Goal, Subgoal, BudgetItem, Strategy } from "@shared/schema";

// Form validation schemas
const sessionFormSchema = z.object({
  session: z.object({
    clientId: z.number(),
    title: z.string().min(1, "Title is required"),
    sessionDate: z.date(),
    duration: z.number().min(5, "Duration must be at least 5 minutes"),
    therapistId: z.number().optional(),
    description: z.string().nullable().optional()
  }),
  sessionNote: z.object({
    presentAllies: z.array(z.string()).optional().default([]),
    attendeesNotes: z.string().optional().default(""),
    usedProducts: z.array(z.object({
      id: z.number(),
      name: z.string(),
      quantity: z.number().min(1)
    })).optional().default([]),
    productsNotes: z.string().optional().default(""),
    observations: z.string().optional().default(""),
    notes: z.string().optional().default("")
  })
});

// Performance assessment related schemas
const milestoneAssessmentSchema = z.object({
  milestoneId: z.number(),
  milestoneName: z.string().optional(),
  rating: z.number().min(1).max(5),
  notes: z.string().optional().default(""),
  strategies: z.array(z.string()).optional().default([])
});

const performanceAssessmentSchema = z.object({
  goalId: z.number(),
  goalName: z.string().optional(),
  rating: z.number().min(1).max(5),
  notes: z.string().optional().default(""),
  milestones: z.array(milestoneAssessmentSchema).optional().default([])
});

// Combined form schema
const integratedSessionFormSchema = sessionFormSchema.extend({
  performanceAssessments: z.array(performanceAssessmentSchema).optional().default([])
});

// Form values type
type IntegratedSessionFormValues = z.infer<typeof integratedSessionFormSchema>;

// Rating slider component
interface RatingSliderProps {
  value: number;
  onChange: (value: number) => void;
  label: string;
  description?: string;
}

const RatingSlider = ({ value, onChange, label, description }: RatingSliderProps) => {
  return (
    <div className="space-y-2">
      <div className="flex justify-between items-center">
        <label className="text-sm font-medium">{label}</label>
        <div className="flex items-center gap-1">
          {[1, 2, 3, 4, 5].map((rating) => (
            <Button
              key={rating}
              type="button"
              variant={rating === value ? "default" : "outline"}
              size="sm"
              className={cn("h-8 w-8 p-0", 
                rating === value ? "bg-primary text-primary-foreground" : ""
              )}
              onClick={() => onChange(rating)}
            >
              {rating}
            </Button>
          ))}
        </div>
      </div>
      {description && (
        <div className="text-xs text-muted-foreground">{description}</div>
      )}
    </div>
  );
};

// Goal selection dialog
interface GoalSelectionDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  goals: Goal[];
  selectedGoalIds: number[];
  onSelectGoal: (goal: Goal) => void;
}

const GoalSelectionDialog = ({
  open,
  onOpenChange,
  goals,
  selectedGoalIds,
  onSelectGoal
}: GoalSelectionDialogProps) => {
  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-[425px]">
        <DialogHeader>
          <DialogTitle>Select Goals</DialogTitle>
          <DialogDescription>
            Choose goals to assess in this session
          </DialogDescription>
        </DialogHeader>
        <div className="py-4 space-y-4">
          {goals.length > 0 ? (
            goals.map((goal) => (
              <div key={goal.id} className="flex items-center justify-between bg-muted/30 p-3 rounded-lg">
                <div className="font-medium">{goal.title}</div>
                <Button
                  type="button"
                  size="sm"
                  variant={selectedGoalIds.includes(goal.id) ? "secondary" : "outline"}
                  onClick={() => onSelectGoal(goal)}
                  disabled={selectedGoalIds.includes(goal.id)}
                >
                  {selectedGoalIds.includes(goal.id) ? "Selected" : "Select"}
                </Button>
              </div>
            ))
          ) : (
            <div className="text-center py-4">
              <p className="mt-2">No goals available</p>
            </div>
          )}
        </div>
        <DialogFooter>
          <Button variant="outline" onClick={() => onOpenChange(false)}>
            Close
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
};

// Milestone selection dialog
interface MilestoneSelectionDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  subgoals: Subgoal[];
  selectedMilestoneIds: number[];
  onSelectMilestone: (subgoal: Subgoal) => void;
}

const MilestoneSelectionDialog = ({
  open,
  onOpenChange,
  subgoals,
  selectedMilestoneIds,
  onSelectMilestone
}: MilestoneSelectionDialogProps) => {
  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-[425px]">
        <DialogHeader>
          <DialogTitle>Select Milestones</DialogTitle>
          <DialogDescription>
            Choose milestones to assess in this session
          </DialogDescription>
        </DialogHeader>
        <div className="py-4 space-y-4">
          {subgoals.length > 0 ? (
            subgoals.map((subgoal) => (
              <div key={subgoal.id} className="flex items-center justify-between bg-muted/30 p-3 rounded-lg">
                <div className="font-medium">{subgoal.title}</div>
                <Button
                  type="button"
                  size="sm"
                  variant={selectedMilestoneIds.includes(subgoal.id) ? "secondary" : "outline"}
                  onClick={() => onSelectMilestone(subgoal)}
                  disabled={selectedMilestoneIds.includes(subgoal.id)}
                >
                  {selectedMilestoneIds.includes(subgoal.id) ? "Selected" : "Select"}
                </Button>
              </div>
            ))
          ) : (
            <div className="text-center py-4">
              <p className="mt-2">No milestones available</p>
            </div>
          )}
        </div>
        <DialogFooter>
          <Button variant="outline" onClick={() => onOpenChange(false)}>
            Close
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
};

// Main integrated session form component
interface IntegratedSessionFormProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  initialClient?: any;
  isFullScreen?: boolean;
}

export function IntegratedSessionForm({ 
  open, 
  onOpenChange, 
  initialClient, 
  isFullScreen = false 
}: IntegratedSessionFormProps) {
  const [activeTab, setActiveTab] = useState("details");
  const [goalSelectionOpen, setGoalSelectionOpen] = useState(false);
  const [milestoneSelectionOpen, setMilestoneSelectionOpen] = useState(false);
  const [strategySelectionOpen, setStrategySelectionOpen] = useState(false);
  const [productSelectionOpen, setProductSelectionOpen] = useState(false);
  const [currentGoalIndex, setCurrentGoalIndex] = useState<number | null>(null);
  const [currentMilestoneIndex, setCurrentMilestoneIndex] = useState<number | null>(null);
  const [availableProducts, setAvailableProducts] = useState<(BudgetItem & { availableQuantity: number })[]>([]);

  // Get client's goals
  const { data: goals = [] } = useQuery({
    queryKey: ['/api/goals', initialClient?.id],
    enabled: !!initialClient?.id
  });

  // Get client's allies for therapist selection
  const { data: allies = [] } = useQuery({
    queryKey: ['/api/allies', initialClient?.id],
    enabled: !!initialClient?.id
  });

  // Get client's budget items for product selection
  const { data: budgetItems = [] } = useQuery({
    queryKey: ['/api/budget/items', initialClient?.id],
    enabled: !!initialClient?.id
  });

  // Filter for therapists (allies with role 'Therapist')
  const therapists = allies.filter((ally: any) => 
    ally.relationship === 'Therapist' || ally.relationship === 'Lead Therapist'
  );

  // Initialize form
  const form = useForm<IntegratedSessionFormValues>({
    resolver: zodResolver(integratedSessionFormSchema),
    defaultValues: {
      session: {
        clientId: initialClient?.id || 0,
        title: "",
        sessionDate: new Date(),
        duration: 60,
        therapistId: therapists.length > 0 ? therapists[0].id : undefined,
        description: ""
      },
      sessionNote: {
        presentAllies: [],
        attendeesNotes: "",
        usedProducts: [],
        productsNotes: "",
        observations: "",
        notes: ""
      },
      performanceAssessments: []
    }
  });

  // Update form values when initialClient changes
  useEffect(() => {
    if (initialClient) {
      form.setValue("session.clientId", initialClient.id);
    }
  }, [initialClient, form]);

  // When budget items data loads, transform it to available products
  useEffect(() => {
    if (budgetItems && budgetItems.length > 0) {
      const products = budgetItems
        .filter((item: BudgetItem) => {
          // Only show items that are therapy resources/products
          return true; // Replace with actual filtering logic
        })
        .map((item: BudgetItem) => ({
          ...item,
          availableQuantity: 5 // Mock available quantity - replace with actual calculation
        }));

      setAvailableProducts(products);
    }
  }, [budgetItems]);

  // Create session API mutation
  const createSessionMutation = useMutation({
    mutationFn: async (data: IntegratedSessionFormValues) => {
      // First create the session
      const session = await apiRequest('POST', `/api/sessions`, {
        ...data.session
      });

      // Then create the session note 
      const sessionNote = await apiRequest('POST', `/api/sessions/${session.id}/notes`, {
        ...data.sessionNote,
        sessionId: session.id
      });

      // If there are performance assessments, create them
      if (data.performanceAssessments && data.performanceAssessments.length > 0) {
        const assessments = await Promise.all(
          data.performanceAssessments.map(async (assessment) => {
            const created = await apiRequest('POST', `/api/sessions/${session.id}/notes/${sessionNote.id}/assessments`, {
              goalId: assessment.goalId,
              rating: assessment.rating,
              notes: assessment.notes
            });

            // Create milestone assessments if any
            if (assessment.milestones && assessment.milestones.length > 0) {
              await Promise.all(
                assessment.milestones.map(async (milestone) => {
                  return await apiRequest('POST', `/api/sessions/${session.id}/notes/${sessionNote.id}/assessments/${created.id}/milestones`, {
                    milestoneId: milestone.milestoneId,
                    rating: milestone.rating,
                    notes: milestone.notes,
                    strategies: milestone.strategies
                  });
                })
              );
            }

            return created;
          })
        );
      }

      return session;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/sessions'] });
      queryClient.invalidateQueries({ queryKey: ['/api/sessions', initialClient?.id] });
      onOpenChange(false);
      // Could show toast success message here
    }
  });

  // Navigation handlers
  const handleNext = () => {
    if (activeTab === "details") setActiveTab("performance");
  };

  const handleBack = () => {
    if (activeTab === "performance") setActiveTab("details");
  };

  // Add goal to assessment
  const handleGoalSelection = (goal: Goal) => {
    const currentAssessments = form.getValues("performanceAssessments") || [];
    form.setValue("performanceAssessments", [
      ...currentAssessments,
      {
        goalId: goal.id,
        goalName: goal.title,
        rating: 3, // Default middle rating
        notes: "",
        milestones: []
      }
    ]);
    setGoalSelectionOpen(false);
  };

  // Add milestone to assessment
  const handleMilestoneSelection = (subgoal: Subgoal) => {
    if (currentGoalIndex !== null) {
      const currentAssessments = form.getValues("performanceAssessments");
      const currentMilestones = currentAssessments[currentGoalIndex].milestones || [];
      
      const updatedMilestones = [
        ...currentMilestones,
        {
          milestoneId: subgoal.id,
          milestoneName: subgoal.title,
          rating: 3, // Default middle rating
          notes: "",
          strategies: []
        }
      ];
      
      form.setValue(`performanceAssessments.${currentGoalIndex}.milestones`, updatedMilestones);
    }
    setMilestoneSelectionOpen(false);
  };

  // Add strategy to milestone
  const handleStrategySelection = (strategy: Strategy) => {
    if (currentGoalIndex !== null && currentMilestoneIndex !== null) {
      const currentStrategies = form.getValues(`performanceAssessments.${currentGoalIndex}.milestones.${currentMilestoneIndex}.strategies`) || [];
      
      // Only add strategy if it's not already in the list
      if (!currentStrategies.includes(strategy.title)) {
        form.setValue(`performanceAssessments.${currentGoalIndex}.milestones.${currentMilestoneIndex}.strategies`, 
          [...currentStrategies, strategy.title]
        );
      }
    }
    setStrategySelectionOpen(false);
  };

  // Product selection handler
  const handleProductSelection = (product: BudgetItem & { availableQuantity: number }, quantity: number) => {
    const currentProducts = form.getValues("sessionNote.usedProducts") || [];
    
    // Check if product is already added
    const existingProductIndex = currentProducts.findIndex(p => p.id === product.id);
    
    if (existingProductIndex >= 0) {
      // Update quantity if product already exists
      const updatedProducts = [...currentProducts];
      updatedProducts[existingProductIndex].quantity += quantity;
      form.setValue("sessionNote.usedProducts", updatedProducts);
    } else {
      // Add new product
      form.setValue("sessionNote.usedProducts", [
        ...currentProducts,
        {
          id: product.id,
          name: product.name || `Product ID ${product.id}`,
          quantity
        }
      ]);
    }
  };

  // Form submission
  function onSubmit(data: IntegratedSessionFormValues) {
    createSessionMutation.mutate(data);
  }

  // Dialog for product selection
  interface ProductSelectionDialogProps {
    open: boolean;
    onOpenChange: (open: boolean) => void;
    products: (BudgetItem & { availableQuantity: number })[];
    onSelectProduct: (product: BudgetItem & { availableQuantity: number }, quantity: number) => void;
  }

  const ProductSelectionDialog = ({
    open,
    onOpenChange,
    products,
    onSelectProduct
  }: ProductSelectionDialogProps) => {
    return (
      <Dialog open={open} onOpenChange={onOpenChange}>
        <DialogContent className="sm:max-w-[425px]">
          <DialogHeader>
            <DialogTitle>Add Products</DialogTitle>
            <DialogDescription>
              Select products used in this session
            </DialogDescription>
          </DialogHeader>
          <div className="py-4 space-y-4">
            {products.length > 0 ? (
              products.map((product) => (
                <div key={product.id} className="flex items-center justify-between bg-muted/30 p-3 rounded-lg">
                  <div>
                    <div className="font-medium">{product.name}</div>
                    <div className="text-sm text-muted-foreground">
                      Available: {product.availableQuantity}
                    </div>
                  </div>
                  <div className="flex items-center gap-2">
                    <Input 
                      type="number"
                      min="1"
                      max={product.availableQuantity}
                      defaultValue="1"
                      className="w-16"
                      id={`product-quantity-${product.id}`}
                    />
                    <Button
                      type="button"
                      size="sm"
                      onClick={() => {
                        const quantityInput = document.getElementById(`product-quantity-${product.id}`) as HTMLInputElement;
                        const quantity = parseInt(quantityInput.value);
                        
                        if (quantity && quantity > 0 && quantity <= product.availableQuantity) {
                          onSelectProduct(product, quantity);
                          onOpenChange(false);
                        }
                      }}
                    >
                      Add
                    </Button>
                  </div>
                </div>
              ))
            ) : (
              <div className="text-center py-4">
                <Package className="h-10 w-10 mx-auto text-muted-foreground" />
                <p className="mt-2">No products available</p>
              </div>
            )}
          </div>
          <DialogFooter>
            <Button variant="outline" onClick={() => onOpenChange(false)}>
              Cancel
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    );
  };

  // Return just the content without dialog wrapper if in full-screen mode
  if (isFullScreen) {
    return (
      <div className="w-full h-full flex flex-col px-6 py-4">
        <Tabs value={activeTab} onValueChange={setActiveTab} className="flex-grow flex flex-col overflow-hidden">
          <TabsList className="grid grid-cols-2 mb-4">
            <TabsTrigger value="details">Session Details & Observations</TabsTrigger>
            <TabsTrigger value="performance">Performance Assessment</TabsTrigger>
          </TabsList>

          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4 overflow-hidden flex flex-col flex-grow">
              <div className="flex-grow overflow-auto pr-2">
                {/* Session Details Tab */}
                <TabsContent value="details" className="space-y-6 mt-0 px-4">
                  {/* Full-width top section for basic session info */}
                  <Card className="shadow-sm border-muted">
                    <CardHeader className="pb-2">
                      <div className="flex justify-between items-start">
                        <div>
                          <CardTitle>New Session</CardTitle>
                          <CardDescription>
                            Create a new therapy session for {initialClient?.name || "the client"}
                          </CardDescription>
                        </div>
                        <Badge variant="outline" className="mt-1">Full-Screen Mode</Badge>
                      </div>
                    </CardHeader>
                    <CardContent>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <FormField
                          control={form.control}
                          name="session.title"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel>Title</FormLabel>
                              <FormControl>
                                <Input placeholder="Enter session title" {...field} />
                              </FormControl>
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                        <FormField
                          control={form.control}
                          name="session.sessionDate"
                          render={({ field }) => (
                            <FormItem className="flex flex-col">
                              <FormLabel>Date</FormLabel>
                              <Popover>
                                <PopoverTrigger asChild>
                                  <FormControl>
                                    <Button
                                      variant={"outline"}
                                      className={cn(
                                        "pl-3 text-left font-normal",
                                        !field.value && "text-muted-foreground"
                                      )}
                                    >
                                      {field.value ? (
                                        format(field.value, "PPP")
                                      ) : (
                                        <span>Pick a date</span>
                                      )}
                                      <CalendarIcon className="ml-auto h-4 w-4 opacity-50" />
                                    </Button>
                                  </FormControl>
                                </PopoverTrigger>
                                <PopoverContent className="w-auto p-0" align="start">
                                  <Calendar
                                    mode="single"
                                    selected={field.value}
                                    onSelect={field.onChange}
                                    disabled={(date) =>
                                      date > new Date() || date < new Date("1900-01-01")
                                    }
                                    initialFocus
                                  />
                                </PopoverContent>
                              </Popover>
                              <FormMessage />
                            </FormItem>
                          )}
                        />

                        <FormField
                          control={form.control}
                          name="session.duration"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel>Duration (minutes)</FormLabel>
                              <FormControl>
                                <Input
                                  type="number"
                                  min="5"
                                  max="240"
                                  step="5"
                                  {...field}
                                  onChange={(e) => field.onChange(parseInt(e.target.value))}
                                />
                              </FormControl>
                              <FormMessage />
                            </FormItem>
                          )}
                        />

                        <FormField
                          control={form.control}
                          name="session.therapistId"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel>Primary Therapist</FormLabel>
                              <Select
                                onValueChange={(value) => field.onChange(parseInt(value))}
                                defaultValue={field.value?.toString()}
                              >
                                <FormControl>
                                  <SelectTrigger>
                                    <SelectValue placeholder="Select a therapist" />
                                  </SelectTrigger>
                                </FormControl>
                                <SelectContent>
                                  {therapists.map(therapist => (
                                    <SelectItem key={therapist.id} value={therapist.id.toString()}>
                                      {therapist.name}
                                    </SelectItem>
                                  ))}
                                </SelectContent>
                              </Select>
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                        
                        <FormField
                          control={form.control}
                          name="session.description"
                          render={({ field }) => (
                            <FormItem className="md:col-span-2">
                              <FormLabel>Description</FormLabel>
                              <FormControl>
                                <Textarea
                                  placeholder="Enter a brief description of the session"
                                  className="resize-none min-h-[80px]"
                                  {...field}
                                />
                              </FormControl>
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                      </div>
                    </CardContent>
                  </Card>

                  {/* Use SessionDetailsLayout for consistent layout */}
                  <SessionDetailsLayout
                    className="mt-6"
                    headerSection={
                      <div className="w-full rounded-lg p-4 bg-muted/20">
                        <h2 className="text-xl font-semibold mb-2">Session Details</h2>
                        <div className="text-muted-foreground text-sm">
                          Record complete session details including who was present, what tools or resources were used, and your observations.
                        </div>
                      </div>
                    }
                    presentSection={
                      <>
                        <div className="flex justify-between items-center mb-2">
                          <h3 className="section-header">
                            <UserCheck className="h-5 w-5" />
                            Present
                          </h3>

                          {/* Add New Attendee Button */}
                          <Button
                            variant="outline"
                            size="sm"
                            onClick={() => {
                              if (allies.length > 0) {
                                // Get current allies and filter to find available ones
                                const currentAllies = form.getValues("sessionNote.presentAllies") || [];
                                const availableAllies = allies.filter(ally => 
                                  !currentAllies.includes(ally.name)
                                );

                                if (availableAllies.length > 0) {
                                  // Add the first available ally
                                  const newAttendee = availableAllies[0].name;
                                  const currentAttendees = form.getValues("sessionNote.presentAllies") || [];
                                  form.setValue("sessionNote.presentAllies", [...currentAttendees, newAttendee]);
                                }
                              }
                            }}
                            className="px-2"
                          >
                            <Plus className="h-4 w-4 mr-1" />
                            <span>Add</span>
                          </Button>
                        </div>

                        {/* Attendees list */}
                        <div className="space-y-2 mb-4">
                          <FormField
                            control={form.control}
                            name="sessionNote.presentAllies"
                            render={({ field }) => (
                              <FormItem>
                                <div className="space-y-2">
                                  {field.value && field.value.length > 0 ? (
                                    field.value.map((attendee, index) => (
                                      <div key={index} className="flex items-center justify-between p-2 bg-muted/30 rounded-md">
                                        <div className="flex items-center">
                                          <User className="h-4 w-4 mr-2 text-muted-foreground" />
                                          <span>{attendee}</span>
                                        </div>
                                        <Button 
                                          type="button"
                                          variant="ghost" 
                                          size="sm"
                                          onClick={() => {
                                            const updatedAttendees = [...field.value];
                                            updatedAttendees.splice(index, 1);
                                            form.setValue("sessionNote.presentAllies", updatedAttendees);
                                          }}
                                          className="h-8 w-8 p-0"
                                        >
                                          <X className="h-4 w-4" />
                                        </Button>
                                      </div>
                                    ))
                                  ) : (
                                    <div className="text-sm text-muted-foreground p-2">
                                      No attendees added yet
                                    </div>
                                  )}
                                </div>
                                <FormMessage />
                              </FormItem>
                            )}
                          />
                        </div>
                        
                        <FormField
                          control={form.control}
                          name="sessionNote.attendeesNotes"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel>Attendee Notes</FormLabel>
                              <FormControl>
                                <Textarea 
                                  placeholder="Notes about who was present and their roles..."
                                  className="resize-none min-h-[100px]"
                                  {...field}
                                />
                              </FormControl>
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                      </>
                    }
                    productsSection={
                      <>
                        <div className="flex justify-between items-center mb-2">
                          <h3 className="section-header">
                            <Package className="h-5 w-5" />
                            Products & Resources
                          </h3>
                          
                          <Button
                            variant="outline"
                            size="sm"
                            onClick={() => setProductSelectionOpen(true)}
                            className="px-2"
                            disabled={availableProducts.length === 0}
                          >
                            <Plus className="h-4 w-4 mr-1" />
                            <span>Add</span>
                          </Button>
                        </div>

                        {/* Used products list */}
                        <div className="space-y-2 mb-4">
                          <FormField
                            control={form.control}
                            name="sessionNote.usedProducts"
                            render={({ field }) => (
                              <FormItem>
                                <div className="space-y-2">
                                  {field.value && field.value.length > 0 ? (
                                    field.value.map((product, index) => (
                                      <div key={index} className="flex items-center justify-between p-2 bg-muted/30 rounded-md">
                                        <div className="flex-grow">
                                          <div className="flex items-center">
                                            <Package className="h-4 w-4 mr-2 text-muted-foreground" />
                                            <span className="font-medium">{product.name}</span>
                                          </div>
                                          {product.quantity > 1 && (
                                            <div className="text-sm text-muted-foreground ml-6 mt-1">
                                              Quantity: {product.quantity}
                                            </div>
                                          )}
                                        </div>
                                        <Button 
                                          type="button"
                                          variant="ghost" 
                                          size="sm"
                                          onClick={() => {
                                            const updatedProducts = [...field.value];
                                            updatedProducts.splice(index, 1);
                                            form.setValue("sessionNote.usedProducts", updatedProducts);
                                          }}
                                          className="h-8 w-8 p-0"
                                        >
                                          <X className="h-4 w-4" />
                                        </Button>
                                      </div>
                                    ))
                                  ) : (
                                    <div className="text-sm text-muted-foreground p-2">
                                      No products added yet
                                    </div>
                                  )}
                                </div>
                                <FormMessage />
                              </FormItem>
                            )}
                          />
                        </div>

                        <FormField
                          control={form.control}
                          name="sessionNote.productsNotes"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel>Resource Notes</FormLabel>
                              <FormControl>
                                <Textarea 
                                  placeholder="Notes about resources, tools, and materials used..."
                                  className="resize-none min-h-[100px]"
                                  {...field}
                                />
                              </FormControl>
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                      </>
                    }
                    observationsSection={
                      <>
                        <div className="flex items-center mb-2">
                          <h3 className="section-header">
                            <ClipboardList className="h-5 w-5" />
                            Observations
                          </h3>
                        </div>
                        
                        <FormField
                          control={form.control}
                          name="sessionNote.observations"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel>Session Observations</FormLabel>
                              <FormControl>
                                <Textarea 
                                  placeholder="Record your observations during the session..."
                                  className="resize-none min-h-[150px]"
                                  {...field}
                                />
                              </FormControl>
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                        
                        <FormField
                          control={form.control}
                          name="sessionNote.notes"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel>Clinical Notes</FormLabel>
                              <FormControl>
                                <Textarea 
                                  placeholder="Additional clinical notes..."
                                  className="resize-none min-h-[150px]"
                                  {...field}
                                />
                              </FormControl>
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                      </>
                    }
                  />
                </TabsContent>

                {/* Performance Assessment Tab */}
                <TabsContent value="performance" className="space-y-6 mt-0 px-4">
                  {/* Performance assessment content */}
                </TabsContent>
              </div>

              {/* Footer with navigation and submit buttons */}
              <div className="pt-2 border-t flex justify-between items-center">
                <div className="flex items-center">
                  {activeTab !== "details" && (
                    <Button
                      type="button"
                      variant="outline"
                      onClick={handleBack}
                      className="mr-2"
                    >
                      <ChevronLeft className="h-4 w-4 mr-1" />
                      Back
                    </Button>
                  )}
                  {activeTab !== "performance" && (
                    <Button
                      type="button"
                      onClick={handleNext}
                      variant="ghost"
                    >
                      Next
                      <ChevronRight className="h-4 w-4 ml-1" />
                    </Button>
                  )}
                </div>

                <div className="flex items-center space-x-2">
                  <Button
                    type="button"
                    variant="outline"
                    onClick={() => onOpenChange(false)}
                  >
                    Cancel
                  </Button>
                  {activeTab === "performance" && (
                    <Button 
                      type="submit"
                      disabled={createSessionMutation.isPending}
                    >
                      {createSessionMutation.isPending ? "Creating..." : "Create Session"}
                    </Button>
                  )}
                </div>
              </div>
            </form>
          </Form>
        </Tabs>

        {/* Product selection dialog */}
        <Dialog open={productSelectionOpen} onOpenChange={setProductSelectionOpen}>
          <DialogContent className="sm:max-w-[425px]">
            <DialogHeader>
              <DialogTitle>Add Products</DialogTitle>
              <DialogDescription>
                Select products used in this session
              </DialogDescription>
            </DialogHeader>
            <div className="py-4 space-y-4">
              {availableProducts.length > 0 ? (
                availableProducts.map((product) => (
                  <div key={product.id} className="flex items-center justify-between bg-muted/30 p-3 rounded-lg">
                    <div>
                      <div className="font-medium">{product.name}</div>
                      <div className="text-sm text-muted-foreground">
                        Available: {product.availableQuantity}
                      </div>
                    </div>
                    <div className="flex items-center gap-2">
                      <Input 
                        type="number"
                        min="1"
                        max={product.availableQuantity}
                        defaultValue="1"
                        className="w-16"
                        id={`product-quantity-${product.id}`}
                      />
                      <Button
                        type="button"
                        size="sm"
                        onClick={() => {
                          const quantityInput = document.getElementById(`product-quantity-${product.id}`) as HTMLInputElement;
                          const quantity = parseInt(quantityInput.value);
                          
                          if (quantity && quantity > 0 && quantity <= product.availableQuantity) {
                            handleProductSelection(product, quantity);
                            setProductSelectionOpen(false);
                          }
                        }}
                      >
                        Add
                      </Button>
                    </div>
                  </div>
                ))
              ) : (
                <div className="text-center py-4">
                  <Package className="h-10 w-10 mx-auto text-muted-foreground" />
                  <p className="mt-2">No products available</p>
                </div>
              )}
            </div>
            <DialogFooter>
              <Button variant="outline" onClick={() => setProductSelectionOpen(false)}>
                Cancel
              </Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>

        {/* Strategy selection dialog */}
        <StrategySelectionDialog
          open={strategySelectionOpen}
          onOpenChange={setStrategySelectionOpen}
          selectedStrategies={
            currentGoalIndex !== null && currentMilestoneIndex !== null
              ? form.getValues(`performanceAssessments.${currentGoalIndex}.milestones.${currentMilestoneIndex}.strategies`) || []
              : []
          }
          milestoneId={
            currentGoalIndex !== null && currentMilestoneIndex !== null
              ? form.getValues(`performanceAssessments.${currentGoalIndex}.milestones.${currentMilestoneIndex}.milestoneId`) || 0
              : 0
          }
          onSelectStrategy={handleStrategySelection}
          maxStrategies={5}
        />
      </div>
    );
  }

  // Regular modal dialog for non-fullscreen use
  return (
    <Dialog open={open} onOpenChange={onOpenChange} modal={true}>
      <DialogContent className="sm:max-w-[90vw] max-h-[90vh] overflow-hidden flex flex-col">
        <DialogHeader>
          <DialogTitle>New Session</DialogTitle>
          <DialogDescription>
            Create a new therapy session for {initialClient?.name || "the client"}
          </DialogDescription>
        </DialogHeader>

        {/* Rest of the dialog content for modal use */}
        {/* Similar to full-screen mode but with some modal-specific adjustments */}
      </DialogContent>
    </Dialog>
  );
}